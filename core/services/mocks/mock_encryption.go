// Code generated by MockGen. DO NOT EDIT.
// Source: core/services/encryptions.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEncryptions is a mock of Encryptions interface.
type MockEncryptions struct {
	ctrl     *gomock.Controller
	recorder *MockEncryptionsMockRecorder
}

// MockEncryptionsMockRecorder is the mock recorder for MockEncryptions.
type MockEncryptionsMockRecorder struct {
	mock *MockEncryptions
}

// NewMockEncryptions creates a new mock instance.
func NewMockEncryptions(ctrl *gomock.Controller) *MockEncryptions {
	mock := &MockEncryptions{ctrl: ctrl}
	mock.recorder = &MockEncryptionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncryptions) EXPECT() *MockEncryptionsMockRecorder {
	return m.recorder
}

// Compare mocks base method.
func (m *MockEncryptions) Compare(encryptedPwd, pwd string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compare", encryptedPwd, pwd)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Compare indicates an expected call of Compare.
func (mr *MockEncryptionsMockRecorder) Compare(encryptedPwd, pwd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compare", reflect.TypeOf((*MockEncryptions)(nil).Compare), encryptedPwd, pwd)
}

// Encrypt mocks base method.
func (m *MockEncryptions) Encrypt(pwd string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", pwd)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockEncryptionsMockRecorder) Encrypt(pwd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockEncryptions)(nil).Encrypt), pwd)
}
